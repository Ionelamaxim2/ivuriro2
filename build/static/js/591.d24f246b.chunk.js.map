{"version":3,"file":"static/js/591.d24f246b.chunk.js","mappings":"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","sources":["../node_modules/ogl/src/extras/Triangle.js","components/LiquidChrome.jsx"],"sourcesContent":["import { Geometry } from '../core/Geometry.js';\n\nexport class Triangle extends Geometry {\n    constructor(gl, { attributes = {} } = {}) {\n        Object.assign(attributes, {\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\n        });\n\n        super(gl, attributes);\n    }\n}\n","import { useRef, useEffect } from \"react\";\nimport { Renderer, Program, Mesh, Triangle } from \"ogl\";\n\nconst LiquidChrome = ({\n  baseColor = [1.0, 0.97, 0.9],\n  speed = 0.4,\n  amplitude = 0.5,\n  frequencyX = 3,\n  frequencyY = 2,\n  interactive = true,\n  ...props\n}) => {\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    const renderer = new Renderer({ antialias: true });\n    const gl = renderer.gl;\n\n    gl.clearColor(...baseColor, 1.0);\n\n    const vertexShader = `\n      attribute vec2 position;\n      attribute vec2 uv;\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0.0, 1.0);\n      }\n    `;\n\n    const fragmentShader = `\n      precision highp float;\n      uniform float uTime;\n      uniform vec3 uResolution;\n      uniform vec3 uBaseColor;\n      uniform float uAmplitude;\n      uniform float uFrequencyX;\n      uniform float uFrequencyY;\n      uniform vec2 uMouse;\n      varying vec2 vUv;\n\n      vec4 renderImage(vec2 uvCoord) {\n          vec2 fragCoord = uvCoord * uResolution.xy;\n          vec2 uv = (2.0 * fragCoord - uResolution.xy) / min(uResolution.x, uResolution.y);\n\n          for (float i = 1.0; i < 10.0; i++){\n              uv.x += uAmplitude / i * cos(i * uFrequencyX * uv.y + uTime + uMouse.x * 3.14159);\n              uv.y += uAmplitude / i * cos(i * uFrequencyY * uv.x + uTime + uMouse.y * 3.14159);\n          }\n\n          vec2 diff = (uvCoord - uMouse);\n          float dist = length(diff);\n          float falloff = exp(-dist * 20.0);\n          float ripple = sin(10.0 * dist - uTime * 2.0) * 0.03;\n          uv += (diff / (dist + 0.0001)) * ripple * falloff;\n\n          float sineValue = abs(sin(uTime - uv.y - uv.x));\n          vec3 color = mix(vec3(0.9, 0.8, 0.7), vec3(1.0, 0.97, 0.9), sineValue);\n\n          return vec4(color, 1.0);\n      }\n\n      void main() {\n          vec4 col = vec4(0.0);\n          int samples = 0;\n          for (int i = -1; i <= 1; i++){\n              for (int j = -1; j <= 1; j++){\n                  vec2 offset = vec2(float(i), float(j)) * (1.0 / min(uResolution.x, uResolution.y));\n                  col += renderImage(vUv + offset);\n                  samples++;\n              }\n          }\n          gl_FragColor = col / float(samples);\n      }\n    `;\n\n    const geometry = new Triangle(gl);\n    const program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        uTime: { value: 0 },\n        uResolution: {\n          value: new Float32Array([\n            gl.canvas.width,\n            gl.canvas.height,\n            gl.canvas.width / gl.canvas.height,\n          ]),\n        },\n        uBaseColor: { value: new Float32Array(baseColor) },\n        uAmplitude: { value: amplitude },\n        uFrequencyX: { value: frequencyX },\n        uFrequencyY: { value: frequencyY },\n        uMouse: { value: new Float32Array([0, 0]) },\n      },\n    });\n    const mesh = new Mesh(gl, { geometry, program });\n\n    function resize() {\n      renderer.setSize(container.clientWidth, container.clientHeight);\n      const resUniform = program.uniforms.uResolution.value;\n      resUniform[0] = gl.canvas.width;\n      resUniform[1] = gl.canvas.height;\n      resUniform[2] = gl.canvas.width / gl.canvas.height;\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n\n    function handleMouseMove(event) {\n      const rect = container.getBoundingClientRect();\n      const x = (event.clientX - rect.left) / rect.width;\n      const y = 1 - (event.clientY - rect.top) / rect.height;\n      const mouseUniform = program.uniforms.uMouse.value;\n      mouseUniform[0] = x;\n      mouseUniform[1] = y;\n    }\n\n    function handleTouchMove(event) {\n      if (event.touches.length > 0) {\n        const touch = event.touches[0];\n        const rect = container.getBoundingClientRect();\n        const x = (touch.clientX - rect.left) / rect.width;\n        const y = 1 - (touch.clientY - rect.top) / rect.height;\n        const mouseUniform = program.uniforms.uMouse.value;\n        mouseUniform[0] = x;\n        mouseUniform[1] = y;\n      }\n    }\n\n    if (interactive) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n      container.addEventListener(\"touchmove\", handleTouchMove);\n    }\n\n    let animationId;\n    function update(t) {\n      animationId = requestAnimationFrame(update);\n      program.uniforms.uTime.value = t * 0.001 * speed;\n      renderer.render({ scene: mesh });\n    }\n    animationId = requestAnimationFrame(update);\n\n    container.appendChild(gl.canvas);\n\n    return () => {\n      cancelAnimationFrame(animationId);\n      window.removeEventListener(\"resize\", resize);\n      if (interactive) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n        container.removeEventListener(\"touchmove\", handleTouchMove);\n      }\n      if (gl.canvas.parentElement) {\n        gl.canvas.parentElement.removeChild(gl.canvas);\n      }\n      gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n    };\n  }, [baseColor, speed, amplitude, frequencyX, frequencyY, interactive]);\n\n  return <div ref={containerRef} className=\"w-full h-full\" {...props} />;\n};\n\nexport default LiquidChrome;\n"],"names":["Triangle","Geometry","constructor","gl","attributes","arguments","length","undefined","Object","assign","position","size","data","Float32Array","uv","super","_ref","baseColor","speed","amplitude","frequencyX","frequencyY","interactive","props","containerRef","useRef","useEffect","current","container","renderer","Renderer","antialias","clearColor","geometry","program","Program","vertex","fragment","uniforms","uTime","value","uResolution","canvas","width","height","uBaseColor","uAmplitude","uFrequencyX","uFrequencyY","uMouse","mesh","Mesh","resize","setSize","clientWidth","clientHeight","resUniform","handleMouseMove","event","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","mouseUniform","handleTouchMove","touches","touch","animationId","window","addEventListener","requestAnimationFrame","update","t","render","scene","appendChild","_gl$getExtension","cancelAnimationFrame","removeEventListener","parentElement","removeChild","getExtension","loseContext","_jsx","ref","className"],"sourceRoot":""}